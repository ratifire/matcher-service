name: Build

env:
  IMAGE_TAG: ${{ github.sha }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  MONGO_DB_URI: ${{ secrets.MONGO_DB_URI }}
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to deploy (prod, dev or qa)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa
          - prod

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Update application.properties with secrets
        run: |
          AWS_ACCESS_KEY_ID_ESCAPED=$(printf '%s' "$AWS_ACCESS_KEY_ID" | sed 's/[\/&]/\\&/g')
          AWS_SECRET_ACCESS_KEY_ESCAPED=$(printf '%s' "$AWS_SECRET_ACCESS_KEY" | sed 's/[\/&]/\\&/g')
          AWS_REGION_ESCAPED=$(printf '%s' "$AWS_REGION" | sed 's/[\/&]/\\&/g')
          MONGO_DB_URI_ESCAPED=$(printf '%s' "$MONGO_DB_URI" | sed 's/[\/&]/\\&/g')

          sed -i "s|<AWS_ACCESS_KEY_ID>|$AWS_ACCESS_KEY_ID_ESCAPED|g" src/main/resources/application.properties
          sed -i "s|<AWS_SECRET_ACCESS_KEY>|$AWS_SECRET_ACCESS_KEY_ESCAPED|g" src/main/resources/application.properties
          sed -i "s|<AWS_REGION>|$AWS_REGION_ESCAPED|g" src/main/resources/application.properties
          sed -i "s|<MONGO_DB_URI>|$MONGO_DB_URI_ESCAPED|g" src/main/resources/application-${{ github.event.inputs.environment }}.properties
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          MONGO_DB_URI: ${{ secrets.MONGO_DB_URI }}
      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

#      - name: run tests
#        run: ./gradlew test

      - name: run build
        run: ./gradlew build -x test

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
        run: |
          # Build a docker container 
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

      - name: Push image to Amazon ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
        run: |
          # Push image to ECR.
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
